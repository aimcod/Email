#!/bin/bash

# The script will install postfix and mailutils if they are not already installed.
# Backups are taken of the relevant files, if they already exist
# /etc/postfix/main.cf is completely rewritten with the new configuration
# We don't touch /etc/aliases  or user mailboxes. If mails are not received by the user, check root's mailbox.
# Script takes 4 parameters, as string, with spaces between them. No quotes are needed. Parameters are as follows:
# server name. can be smtp.gmail.com or any other smtp server that is accessible by the device(s) you are setting up.

# smtp port. can be 465, 587, 25, 2525 or any other smtp port your smtp server is using.
# username. this is the username of the user that is hosted on the smtp server, on behalf of which you are sending the email from
# password. the password, in plain text, of the above user. the password is only visible in Package_RemoteConsole, the user who is typing the password in Naverisk or the terminal and to the root user.

#example sudo ./setmail smtp.gmail.com 465 username PassWord!


hostname=$(hostname)
main='/etc/postfix/main.cf'
post='/etc/postfix'
ids=(debian centos rhel fedora suse)
systemID=$(grep ^ID_LIKE= /etc/os-release | cut -d'=' -f2 | cut -d'"' -f2 | awk '{print $1}')
likelydebian=$(grep ^ID= /etc/os-release | cut -d'=' -f2 | cut -d'"' -f2 | awk '{print $1}')


for id in "${ids[@]}"; do

if [ "" = "$systemID" ]
then
        if [ "$id" = "$likelydebian" ]
        then
        echo We are on a pure $id system. Continuing with apt sequence...

                postfix=$(DEBIAN_FRONTEND=noninteractive apt-get install postfix)
                mailutils=$(DEBIAN_FRONTEND=noninteractive apt-get install mailutils)
                sasl=/etc/postfix/sasl/sasl_passwd
                ssl=/etc/ssl/certs/ca-certificates.crt

        fi
elif [ "$id" = "$systemID" ]
then
        echo We are on a $systemID. Running next steps...

        if [ "$id" = "debian" ]
        then
                echo We are on a debian based distro. Continuing with apt sequence..

                postfix=$(DEBIAN_FRONTEND=noninteractive apt-get install postfix)
                mailutils=$(DEBIAN_FRONTEND=noninteractive apt-get install mailutils)
                sasl=/etc/postfix/sasl/sasl_passwd
                ssl=/etc/ssl/certs/ca-certificates.crt

        elif [ "$id" = "suse" ]
        then

                echo We are on a SUSE system. Continuing with zypper sequence...
                echo sasl file location adjusted for SUSE environment
                sasl=/etc/postfix/sasl_passwd
                postfix=$(zypper -n install postfix)
                mailutils=$(zypper -n install mailx)
                mail=$(which mailx)

        else

                echo  We are on a Red Hat, or Red Hat based system. Continuing with [backwards compatible]yum sequence.

                echo sasl and certificate  file location adjusted...
                ssl=/etc/ssl/certs/ca-bundle.crt
                sasl=/etc/postfix/sasl_passwd
                postfix=$(yum install postfix -y)
                mailutils=$(yum install mailx -y)
                mail=$(which mailx)

        fi
fi

done

if [ -z $(which postfix) ]
        then
        echo "Postfix is not installed. Binaries not found; Unit service not found. Installing postfix."

        sleep 1
        $postfix
fi
if [ -z $(which $mail) ]
        then

        echo -e "Mail utilities are not installed. $mail binaries not found. Installing mail utilities..\n"

        sleep 1
        $mailutils
fi

if [ -f $main ]  || [ -d $post ]
then

echo -e "Backing up original postfix main.cf file...\n"

sleep 1

/usr/sbin/postconf -n >> ~/postfix_config.org

echo -e "Backing up entire postfix directory, just in case..."

sleep 1

tar cfv /etc/PostfixBack.tar.xz /etc/postfix

sleep 1

else echo -e "No previous main.cf file found, or a /etc/postfix directory.\n\nNothing found, nothing lost...! :) \n"

sleep 1

fi

echo -e "Adding $1 $2 $3 $4 to $sasl\n"

sleep 1

bash -c "echo $1:$2 $3:$4 >> $sasl"

chmod -R 0600 $sasl

chown -R root:root $sasl

echo -e "Creating new $main configuration... and removing old one.\n"

sleep 1

rm $main

cat << EOF >> $main


# See /usr/share/postfix/main.cf.dist for a commented, more complete version


# Debian specific:  Specifying a file name will cause the first
# line of that file to be used as the name.  The Debian default
# is /etc/mailname.
#myorigin = /etc/mailname

smtpd_banner = $myhostname ESMTP $mail_name (Ubuntu)
biff = no

# appending .domain is the MUA's job.
append_dot_mydomain = no

# Uncomment the next line to generate "delayed mail" warnings
#delay_warning_time = 4h

readme_directory = /usr/share/doc/postfix

# See http://www.postfix.org/COMPATIBILITY_README.html -- default to 2 on
# fresh installs.
compatibility_level = 2



# TLS parameters
smtpd_tls_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem
smtpd_tls_key_file=/etc/ssl/private/ssl-cert-snakeoil.key
smtpd_tls_security_level=encrypt

smtp_tls_CApath=/etc/ssl/certs
smtp_tls_security_level=encrypt
smtp_tls_session_cache_database = btree:${data_directory}/smtp_scache
smtp_tls_wrappermode = yes
smtp_sasl_auth_enable = yes
smtp_sasl_password_maps = hash:$sasl
smtp_sasl_security_options =
smtp_tls_CAfile = $ssl
smtp_use_tls = yes

smtpd_relay_restrictions = permit_mynetworks,permit_sasl_authenticated,defer_unauth_destination
myhostname = $hostname
alias_maps = hash:/etc/aliases
alias_database = hash:/etc/aliases
#mydestination = $hostname,localhost.localdomain,localhost,$1
relayhost = $1:$2
relay_domains = $1
mynetworks = 127.0.0.0/8 [::ffff:127.0.0.0]/104 [::1]/128, $hostname, localhost
mailbox_command = procmail -a "$EXTENSION"
mailbox_size_limit = 0
recipient_delimiter = +
inet_interfaces = all
inet_protocols = all
html_directory = /usr/share/doc/postfix/html

EOF

/usr/sbin/postmap $sasl && systemctl restart postfix
/usr/sbin/postfix check
/usr/sbin/postconf -n >> ~/postfix_config.new

#diff ~/postfix_config.new ~/postfix_config.org
echo Done!
